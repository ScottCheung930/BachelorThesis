%% MUSIC_OFDMsensing
% CIM: Input channel information matrix(pre-processed by known transmitted symbols)
% k:target number
% Author: Yunbo HU(SIMIT, UCAS)
% GitHub: https://github.com/edenhu1111
function [theta, P_music_theta, L] = MUSIC_OFDMsensing(R, angle_start,angle_end)
    global  NR
    %% DoA estimation
    Iv=eye(NR,NR);
    Iv=fliplr(Iv);
    R=R+Iv*conj(R)*Iv;%ToeplitzåŒ–
    [V,D]=eig(R);
    [d,ind_D] = sort(diag(D),'descend');
    L=MDL(d);
    if(L==0)
         fprintf("According to MDL criterion, L=0\n");
        return;
    end
    U_n=V(:,ind_D(L+1:end));
    %U_s=V(:,ind_D(1:L));
    theta=linspace(angle_start,angle_end,min(100,round((angle_end-angle_start)/0.1)));
    A=steeringGen(theta, NR);
    P_music_theta=zeros(1,length(theta));
    for ii=1:length(theta)
        %P_music_theta(ii)=diag(1./d(1:L))*(A(:,ii)'*(U_s*U_s')*A(:,ii))/(A(:,ii)'*(U_n*U_n')*A(:,ii));
        P_music_theta(ii)=1/(A(:,ii)'*(U_n*U_n')*A(:,ii));
    end
    P_music_theta=abs(P_music_theta);
    P_music_theta=P_music_theta/max(P_music_theta);
    P_music_theta=10*log10(P_music_theta);
    if(range(P_music_theta)<0.01)
        fprintf("No MUSIC peak!\n");
        L=0;
    end
end

%% find the number of targets using MDL criterion
function L=MDL(S) %S=sort(diag(D),'decend')
global M Ns NR
    mdl=zeros(1:NR);
    for s=0:NR-1
        A=S.^(1/NR-s);
        mdl(s+1)=-((NR-s)*M*Ns)*(log(prod(A(s+1:NR)))-log((1/(NR-s)*sum(S(s+1:NR)))))+0.5*s*(2*NR-s)*log(M*Ns);
    end
    figure()
    plot(0:NR-1,)
    [L,ind]=max(mdl);
    L=L-ind;
end